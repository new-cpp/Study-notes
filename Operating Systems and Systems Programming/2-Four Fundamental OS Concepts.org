#+title: 2 Four Fundamental Os Concepts

*** Thread: Execution Context
+ Fully describes program state
+ Program Counter, Registers, Execution Flags, Stack
*** Address space (with or w/o translation)
+ Set of memory addresses accessible to program (for read or write)
+ May be distinct from memory space of the physical machine
  (in which case programs operate in a virtual address space)
*** Process: an instance of a running program
+ Protected Address Space + One or more Threads
*** Dual mode operation / Protection
+ Only the system has the ability to access certain resources
+ Combined with translation, isolates programs from each other and
the OS from programs


** Run Programs:
+ Write them and compile them
+ Load instruction and data segments of executable file into memory
  (The instruction cycle : Fetch/Decode/Execute)
+ Create stack and heap
+ Transfer control to program
+ Provide services to program
+ While protecting OS and program

** Thread of control:
*Thread* is  Single unique execution context.
 + Program Counter, Registers, Execution Flags, Stack, Memory State
 + A *thread* is executing on a processor (core) when it is *resident* in the processor registers
 + *Resident* means: Registers hold the *root state* (context) of the thread:
 + Including *program counter* (PC) register & currently executing instruction
 + PC points at next instruction in memory
 + Instructions stored in memory
 + Including intermediate values for ongoing computations
 + Can include actual values (like integers) or pointers to values in memory
 + Stack pointer holds the address of the top of stack (which is in memory)
 + The rest is in memory
 + A thread is suspended (not executing) when its state is not loaded (resident) into the processor
  - Processor state pointing at some other thread
  -  Program counter register is not pointing at next instruction from this thread
  - Often: a copy of the last value for each register stored in memory

** Illusion of Multiple Processors with single core
 Assume a single processor (core). How do we provide the illusion of multiple processors?
 + Multiplex in time!:
     switching between threads:
     -What triggered this switch? :  Timer, voluntary yield, I/O.
 + Threads are virtual cores

- Contents of virtual core (thread):
    + Program counter, stack pointer
    + Registers
- Where is the thread?
   + On the real (physical) core, or
   +  Saved in chunk of memory  called the Thread Control Block (TCB).



** Address Space:
