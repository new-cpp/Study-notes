#+title: 1 What Is An Operating System

* Numbers Everyone should Know :
 1. L1 cache refrence                         0.5 ns
 2. Branch mispredict                           5 ns
 3. L2 cache reference                          7 ns
 4. Mutex lock/unlock                          25 ns
 5. Main memory reference                     100 ns
 6. Compress 1K bytes with Zippy            3 000 ns
 7. Send 2k bytes over 1Gbps network       20 000 ns
 8. Read 1MB sequentially from memory     250 000 ns
 9. Round trip within same datacenter     500 000 ns
 10. Disk seek                         10 000 000 ns
 11. Read 1MB sequentially from disk   20 000 000 ns
12.  Send packet CA->Netherlands->CA  150 000 000 ns


* OS : Provide consistent abstractions to applications, even on different hardware
 Manage sharing of resources among multiple applications

The key building blocks:
- Processes
- Threads, Concurrency, Scheduling, Coordination
- Address Spaces
- Protection, Isolation, Sharing, Security
- Communication, Protocols
- Persistent storage, transactions, consistency, resilience
- Interfaces to all devices

* Kernel he one program running at all times on the compute.

OS is :
*Illusionist*
- Provide clean, easy-to-use abstractions of physical resources
- Infinite memory, dedicated machine
- Higher level objects: files, users, messages
-  Masking limitations, virtualization

 *Referee*
- Manage protection, isolation, and sharing of resources, switching process
 Resource allocation and communication
 (Segmentation fault core dumped in case of accessing different process resources).
 - OS isolates processes from each other
 - OS isolates itself from other processes
 -even though they are actually runningon the same hardware!


*Glue*
-  Common services
-  Storage, Window system, Networking
-  Sharing, Authorization
-  Look and feel
- OS provides common services in the form of I/O

  {Compiled program : use System libs}
             ||
  {Process: Execution environement with restricted right provided by OS
    Thread + Address Spaces + Files + Sockets}
             ||
   { operating System }
             ||
   { Hardware : Processor {Page table, TLB} Memory+OS mem , Storage, network, I/O      control }


- Application's machine is the process abstraction provided by the OS
- Each running program runs in its own process
- Processes provide nicer interfaces than raw hardware

* A process consists of:
- Address Space
- One or more threads of control executing in that address space
- Additional system state associated with it
- Open files
- Open sockets (network connections)


* OS Abstracts the Underlying Hardware
- Processor -> Thread
- Memory -> Adress Spaces
- Disks,SSDs -> Files
- Networks -> sockets
- Machines -> processes
* OS Protects Processes and the Kernel
Run multiple applications and:
- Keep them from interfering with or crashing the operating system
- Keep them from interfering with or crashing each other

*  Basic Tool: Dual-Mode Operation
Hardware provides at least two modes:
1. Kernel Mode (or supervisor mode)
2. User Mode
 Certain operations are prohibited when running in user mode
- Changing the page table pointer, disabling interrupts, interacting directly w/
hardware, writing to kernel memory
 Carefully controlled transitions between user mode and kernel mode
- System calls, interrupts, exceptions
