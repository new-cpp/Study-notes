# SDL_COMMON USED FUNCTION

### Subsystem:

   - int SDL_Init(Uint32 flags);
     flags ->SDL_INIT_TIMER, SDL_INIT_AUDIO,SDL_INIT_EVERYTHING...

   -SDL_Quit();

### Window:
   -SDL_Window * SDL_CreateWindow(const char *title,
                              int x, int y, int w,
                              int h, Uint32 flags);
	 flags ->windows flags( bordless , resiable...)(SDL_WINDOW_SHOWN)

  - SDL_DestroyWindow(m_window);


### Renderer: (for gpu internal hardware specification rendering)

    -SDL_Renderer * SDL_CreateRenderer(SDL_Window * window,
                       int index, Uint32 flags);
     flags : SDL_RENDERER_ACCELERATED


     - int SDL_SetRenderDrawColor(SDL_Renderer * renderer,
                   Uint8 r, Uint8 g, Uint8 b,
                   Uint8 a);

     - SDL_DestroyRenderer

     /*Clear the current rendering target with the drawing color.
     -int SDL_RenderClear(SDL_Renderer * renderer);

     /*Copy a portion of the texture to the current rendering target.
     - int SDL_RenderCopy(SDL_Renderer * renderer,
                   SDL_Texture * texture,
                   const SDL_Rect * srcrect,
                   const SDL_Rect * dstrect);

    /* Update the screen with any rendering performed since the previous call.
      -void SDL_RenderPresent(SDL_Renderer * renderer);

### surface: (for cpu rendering)
    -SDL_Surface * SDL_GetWindowSurface(SDL_Window * window);

    -SDL_Surface* SDL_LoadBMP(const char* file)
	-SDL_Surface* SDL_ConvertSurface
		(SDL_Surface * src, const SDL_PixelFormat * fmt, Uint32 flags);// for screen format

	-SDL_FreeSurface(surface*)

	-int SDL_BlitSurface(SDL_Surface*    src,
						const SDL_Rect* srcrect,
						SDL_Surface*    dst,
						SDL_Rect*       dstrect)
	-int SDL_BlitScaled(SDL_Surface*    src,
					const SDL_Rect* srcrect,
					SDL_Surface*    dst,
					SDL_Rect*       dstrect)


	-int SDL_UpdateWindowSurface(SDL_Window * window);

### event
    int SDL_PollEvent(SDL_Event * event);
	SDL_Event e;
	e.type == SDL_KEYDOWN , SDL_QUIT
	e.key.keysym.sym -> SDLK_UP ....

### texture
    -SDL_Texture * SDL_CreateTextureFromSurface(SDL_Renderer * renderer, SDL_Surface * surface);/* surface loaded from image
    -SDL_DestroyTexture
    -SDL_QueryTexture( texture, &format, &access, &width, &height );

### SDL_image lib
    -int IMG_Init(int flags);
    (return a flags need to mask to see if the bit of flag is set)
    ex: IMG_Init(IMG_INIT_PNG)&IMG_INIT_PNG.
    -SDL_Surface * IMG_Load(const char *file);
    -void IMG_Quit(void);

### Geometry

fill Rect:
- SDL_Rect fillRect = { SCREEN_WIDTH / 4, SCREEN_HEIGHT / 4, SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2 };
                SDL_SetRenderDrawColor( gRenderer, 0xFF, 0x00, 0x00, 0xFF );
                SDL_RenderFillRect( gRenderer, &fillRect );

 outlined Rect:
- SDL_Rect outlineRect = { SCREEN_WIDTH / 6, SCREEN_HEIGHT / 6, SCREEN_WIDTH * 2 / 3, SCREEN_HEIGHT * 2 / 3 };
                SDL_SetRenderDrawColor( gRenderer, 0x00, 0xFF, 0x00, 0xFF );
                SDL_RenderDrawRect( gRenderer, &outlineRect );

 line :
- SDL_SetRenderDrawColor( gRenderer, 0x00, 0x00, 0xFF, 0xFF );
- SDL_RenderDrawLine( gRenderer, 0, SCREEN_HEIGHT / 2, SCREEN_WIDTH, SCREEN_HEIGHT / 2 );

 dot:
 //Draw vertical line of yellow dots
- SDL_SetRenderDrawColor( gRenderer, 0xFF, 0xFF, 0x00, 0xFF );
 for( int i = 0; i < SCREEN_HEIGHT; i += 4 )
 {
     SDL_RenderDrawPoint( gRenderer, SCREEN_WIDTH / 2, i );
 }


### viewport
int SDL_RenderSetViewport(SDL_Renderer * renderer,
                          const SDL_Rect * rect);
ex:
SDL_Rect topLeftViewport{0,0,m_width/2,m_height/2};
SDL_Rect bottomViewport{0,m_height/2,m_width,m_height/2};
SDL_Rect topRightViewport{m_width/2,0,m_width/2,m_height/2};
SDL_RenderSetViewport(m_render,&topLeftViewport);
SDL_RenderCopy(m_render,m_texture,nullptr,nullptr);

SDL_RenderSetViewport(m_render,&bottomViewport);
SDL_RenderCopy(m_render,m_texture,nullptr,nullptr);

SDL_RenderSetViewport(m_render,&topRightViewport);
SDL_RenderCopy(m_render,m_texture,nullptr,nullptr);

SDL_RenderPresent(m_render);

### toggole color transprency:
int SDL_SetColorKey(SDL_Surface * surface,
                    int flag, Uint32 key);

SDL_SetColorKey( loadedSurface, SDL_TRUE, SDL_MapRGB( loadedSurface->format, 0, 0xFF, 0xFF ) )
