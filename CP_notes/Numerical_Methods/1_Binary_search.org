#+title: 1 Binary Search


STL functions :
  binary_search.
  lower_bound.
  upper_bound.
  equal_range.


classi approach
#+NAME: classic apperoch
#+begin_src  cpp

int pos_bin_search(const std::vector<int>& arr, int value )
  {
    int l = 0 , r = arr.size()-1;

    while( l <=r )
      {
        int mid = std::midpoint(l,r);
        if(arr[mid] == value) return mid;
        else if ( arr[mid] < value ) r = mid - 1;
        else l = mid + 1;
      }
    return -1;
  }
#+end_src

lower bound version: find first
#+NAME: typical CP BS template
#+BEGIN_SRC cpp

#define MAX_VALUE 1e9
bool chk(int x)
  {
    // process on the element
  }

int find_first(const std::vector<int>& v, int value)
  {
    int l = 0, r = v.size() - 1;
    while( l <= r )
      {
        //int mid = l + (r - l)/2;
        //int mid = l + (r - l)>>1;
        int mid = std::midpoint(l,r);
        if(chk(mid))
          {
            l = mid + 1;
          }
        else
          {
            r = mid - 1;
          }
      }
    return l - 1;

  }
 #+END_SRC

 jumping search
 idea:
   jump with the biggest possible step close to target.
 #+name:
 #+begin_src cpp

bool condition(int element_position)
  {
    return v[element_postion] <= threshold;
  }

int bin_search(const std::vector<int>& v, int value)
{
  int p = 0;
  for (int step = n; step >= 1 ; step>>1)
    {
      if(p+step < n && condition(p + step))
        {
          p+= step;
        }
    }
  if(condition(p)) return p;
  return -1;
}
 #+end_src
